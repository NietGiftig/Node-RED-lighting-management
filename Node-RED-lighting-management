[{"id":"11371068.5599d","type":"subflow","name":"Subflow 2","info":"","category":"","in":[{"x":60,"y":120,"wires":[{"id":"16a60efe.21eba1"}]}],"out":[{"x":780,"y":80,"wires":[{"id":"15ba466f.e061fa","port":0}]},{"x":800,"y":160,"wires":[{"id":"44a04413.1add7c","port":0}]}],"env":[{"name":"zonename","type":"str","value":""}],"color":"#DDAA99","outputLabels":["To Scene Control","To Scene Management"],"icon":"font-awesome/fa-lightbulb-o"},{"id":"dbaa7ed5.4a1ff","type":"function","z":"11371068.5599d","name":"Get Scenes & Lights","func":"// This function outputs the scene buttons and individual light sliders for a given zone\n// We set msg.zoneid on the input, to select which zone we want to control\n\n// functions to convert rgb values to hex, required for colour picker\nfunction componentToHex(c) { var hex = c.toString(16);return hex.length == 1 ? \"0\" + hex : hex; }\nfunction rgbToHex(r, g, b) { return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b); }\n\n// get zone name (if we want to display this on the page)\nmsg.payload = global.get(\"home.light.config.zones.\" + msg.zoneid + \".friendly_name\")\n\n// loop through all fixture_zone_mappings, if contained zoneID is same as msg.zoneid\n// then use the contained fixtureID to get the fixture info (friendly name and\n// slider / RGB vals or whatever)\nmsg.fixturesettings = {}\nmappings = global.get(\"home.light.config.fixture_zone_mappings\")\nfixtures = global.get(\"home.light.config.fixtures\")\nObject.keys(mappings).forEach(key => {\n    if (mappings[key].zoneID == msg.zoneid) {\n        // fixture = mappings[key].fixtureID\n        msg.fixturesettings[mappings[key].fixtureID] = {\n            \"label\": fixtures[mappings[key].fixtureID].friendly_name,\n            \"resolution\": fixtures[mappings[key].fixtureID].resolution,\n            \"controltype\": fixtures[mappings[key].fixtureID].type,\n            \"setting\":fixtures[mappings[key].fixtureID].current_setting\n        }\n\n        // if RGB then we need to convert RGB vals to hex here and add the\n        // key-value pair to the object above\n        if (\"rgb\" in fixtures[mappings[key].fixtureID].current_setting) {\n            Object.assign(msg.fixturesettings[mappings[key].fixtureID], {\"colour\":rgbToHex(fixtures[mappings[key].fixtureID].current_setting.rgb[0], fixtures[mappings[key].fixtureID].current_setting.rgb[1], fixtures[mappings[key].fixtureID].current_setting.rgb[2])});\n        }\n    }\n})\n\n// Now we want to list out the scenes for the zone\nmsg.scenesforbuttons = global.get(\"home.light.config.zones.\" + msg.zoneid + \".scenes\")\n// if (Object.getOwnPropertyNames(msg.scenesforbuttons).length == 0) { msg.hasscenes = false} else {msg.hasscenes = true};\nmsg.socketid = undefined\nreturn msg;","outputs":1,"noerr":0,"x":420,"y":80,"wires":[["15ba466f.e061fa"]]},{"id":"df9ff651.777018","type":"function","z":"11371068.5599d","name":"Get Scene","func":"// msg.zoneid incoming\n\n// get zone name\n// msg.payload = global.get(\"home.light.config.zones.\" + msg.zoneid + \".friendly_name\")\nmsg.scenes = global.get(\"home.light.config.zones.\" + msg.zoneid + \".scenes\")\n\nreturn msg;","outputs":1,"noerr":0,"x":450,"y":160,"wires":[["44a04413.1add7c"]]},{"id":"16a60efe.21eba1","type":"change","z":"11371068.5599d","name":"set zoneid","rules":[{"t":"set","p":"zoneid","pt":"msg","to":"zonename","tot":"env"}],"action":"","property":"","from":"","to":"","reg":false,"x":210,"y":120,"wires":[["df9ff651.777018","dbaa7ed5.4a1ff"]]},{"id":"15ba466f.e061fa","type":"template","z":"11371068.5599d","name":"","field":"template","fieldType":"msg","format":"handlebars","syntax":"plain","template":"<style>\n    \n    .nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n        margin-top: 0 !important;\n    } \n\n    .button-container {\n        margin:0 0 20px 0;\n        display:inline-grid;\n        grid-template-columns: auto auto auto auto auto auto;\n        grid-gap:2px;\n    }\n    .button-container > .md-button {\n        background-color: rgba(255, 255, 255, 0.8);\n        text-align: center;\n        padding: 0;\n        font-size: 0.6em;\n        white-space: normal;\n        word-wrap: break-word;\n\n    }\n    .button-container > .md-button:nth-child(1) { grid-column-start: 1; grid-column-end: 7; font-size:1.1em; height: 50px;}\n    .button-container > .md-button:nth-child(2) { grid-column-start: 1; grid-column-end: 4; font-size:1.1em; height: 65px;}\n    .button-container > .md-button:nth-child(3) { grid-column-start: 4; grid-column-end: 7; font-size:1.1em; height: 65px;}\n    .button-container > .md-button:nth-child(4) { grid-column-start: 1; grid-column-end: 3; font-size:0.9em; height: 65px;}\n    .button-container > .md-button:nth-child(5) { grid-column-start: 3; grid-column-end: 5; font-size:0.9em; height: 65px;}\n    .button-container > .md-button:nth-child(6) { grid-column-start: 5; grid-column-end: 7; font-size:0.9em; height: 65px;}\n    .slider-container {\n    }\n    .slider-row {\n        /*background-color:#3c3c3c;*/\n        height:50px;\n        margin: 0 0 0 0;\n        width:100%;\n        display:inline-block;\n    }\n    .slider-label {\n        float: left;\n        margin: 0 0 0 45px;\n        padding: 2px 0 2px 10px;\n        width: 89%;\n        font-size:0.8em;\n        background-color: #404040;\n    }\n    .slider-label-floating {\n            float: left;\n    height: 50%;\n    width: 100%;\n    margin-bottom: -50px;\n\n    }\n    .slider-label-text{\n    clear: both;\n    /*height: 100px;*/\n\n    }\n    .slider-val {\n        font-size: 12px; color: #999;\n    }\n    .slider-colpick {\n        float: left;\n        margin: 0;\n        width: 5%;\n    }\n    .slider-slider {\n        float: left;\n        margin: -42px 0 0 57px;\n        width: 86%;\n    }\n    md-input-container {\n        margin: 0px !important;\n    }\n    .no-color-picker {\n        height: 38px;\n        width: 36px;\n        background-color: #ddd;\n        border: 1px solid #aaa;\n        margin: -19px 0 0 0;\n        text-align: center;\n        padding: 4px;\n        color:#777;\n    }\n    .picker {\n        height:55px;\n        width:55px;\n        border-color: transparent;\n        background-color: transparent;\n        margin: -25px 0 0 -4px;\n    }\n    .noscene {\n        background-color:#414141;\n        padding:3px 0 3px 10px;\n        font-size:.8em;\n        color:#bbb;\n    }\n</style>\n\n<script src=\"/js/iro.min.js\"></script>\n\n<div style=\"display:none\">Zone: {{msg.payload}}</div>\n\n\n<!-- Scene buttons -->\n<!--<md-input-container class=\"\" flex=\"\">-->\n<div ng-if=\"msg.hasscenes == false\" class=\"noscene\">No scenes created yet. Please save your first scene.</div>\n<div class=\"button-container\">\n    <md-button style=\"\" ng-repeat=\"(key, value) in msg.scenesforbuttons\" ng-click=\"send({action: 'triggerscene', topic: key, zone: msg.zoneid})\" >{{value.friendly_name}}</md-button>\n    <!--View settings-->\n    <!--<div ng-repeat=\"(key, value) in msg.scenesforbuttons\" style=\"font-size:9px;border:1px solid white;\">{{value.settings}}</div>-->\n<!--</md-input-container>-->\n</div>\n<!-- Sliders -->\n<div class=\"slider-container\">\n    <div ng-repeat=\"(key, value) in msg.fixturesettings\" class=\"slider-row\">\n        <div class=\"slider-label\"><div class=\"slider-label-text\">{{value.label}} <span style=\"slider-val\">({{value.setting.brightness}})</span></div></div>\n        <div class=\"slider-colpick\"><div ng-if=\"value.controltype != '3_RGB'\" class=\"no-color-picker\">(W)</div><input ng-if=\"value.controltype == '3_RGB'\" class=\"picker\" type=\"color\" ng-model=\"value.colour\" ng-change=\"send({action: 'col', topic: key, colour: value.colour})\" /></div>\n        <div class=\"slider-slider\"><md-slider min=\"0\" max=\"100\" step=\"{{value.resolution}}\" ng-model=\"value.setting.brightness\" ng-change=\"send({action: 'bri', topic: key, brightness: value.setting.brightness})\"></md-slider></div>\n    </div>\n</div>","output":"str","x":640,"y":80,"wires":[[]]},{"id":"44a04413.1add7c","type":"template","z":"11371068.5599d","name":"","field":"template","fieldType":"msg","format":"handlebars","syntax":"plain","template":"<style>\n    input {\n        width:150px;\n        margin:0 22px 0 0;\n        display:inline;\n        border-color: #eeeeee;\n        color: #eeeeee;\n        border-bottom-width: 1px;\n        font-family: inherit;\n        background: none;\n        padding: 2px 2px 1px;\n        border-width: 0 0 1px;\n        line-height: 26px;\n        height: 40px;\n        -ms-flex-preferred-size: 26px;\n        border-radius: 0;\n        border-style: solid;\n        box-sizing: border-box;\n        float: left;\n    }\n    .scenemanageselect {\n        width:40%;\n        margin: 0 20px 0 0;\n    }\n\n    md-select span {\n        color:#eee;\n    }\n    md-select .md-select-value.md-select-placeholder  {\n        border-bottom-color: #eee;\n    }\n    .md-select-value .md-select-icon:after {\n        border-bottom-color: #eee;\n        color:#eee;\n    }\n    md-select.md-default-theme .md-select-value, md-select .md-select-value {\n        border-bottom-color: #eee;\n    }\n    md-select.md-default-theme:not([disabled]):focus .md-select-value, md-select:not([disabled]):focus .md-select-value {\n        border-bottom-color: #0eb8c0;\n        border-bottom-width: 1px;\n    }\n    .md-button {\n        height:38px;\n    }\n    .md-container {\n\n    }\n    .deletebutton {\n        display:inline !important;padding:10px;height:38px !important;\n        width:120px;\n        margin:0 20px 0 0 !important;\n        background-color:rgb(153, 71, 0, 0.65) !important;\n    }\n    .updatebutton {\n        display:inline !important;padding:10px;height:38px !important;\n        width:120px;\n        margin:0 20px 0 0 !important;\n        background-color:rgb(153, 144, 0) !important;\n    }\n    .control-row {\n        display:inline-flex; margin: 10px 0 10px 0\n    }\n\n</style>\n\n<!--New Scene-->\n<div class=\"control-row\">\n    <input type=\"text\" placeholder=\"Scene ID\" ng-model=\"msg.sceneid\" name=\"string\" ng-change=\"send({action: 'update_sceneid', sceneid: msg.sceneid})\"  />\n    <input type=\"text\" placeholder=\"Scene Name\" ng-model=\"msg.scenefriendly\" name=\"string\" ng-change=\"send({action: 'update_scenefriendly', scenefriendly: msg.scenefriendly})\" />\n    <md-button style=\"width: 100px; height:40px; display:inline\" ng-click=\"send({action: 'new_scene', zone: msg.zoneid})\">Save</md-button>\n</div>\n\n\n<div ng-if=\"msg.notify === true\">{{msg.notification}}</div>\n\n\n<!--Delete / Update Scene-->\n<div class=\"control-row\">\n    <md-select ng-model=\"msg.someModel\" placeholder=\"Select a scene\" class=\"scenemanageselect\"><md-option ng-value=\"key\" ng-repeat=\"(key, value) in msg.scenes\" ng-click=\"send({action: 'select_to_delete', name: key})\">{{value.friendly_name}} - (ID = {{key}})</md-option></md-select>\n    <md-button ng-click=\"send({action: 'updatescene', zone: msg.zoneid})\" class=\"updatebutton\" >Update</md-button>\n    <md-button ng-click=\"send({action: 'deletescene', zone: msg.zoneid})\" class=\"deletebutton\" >Delete</md-button>\n</div>","output":"str","x":640,"y":160,"wires":[[]]},{"id":"ab7e3243.4c0d2","type":"comment","z":"11371068.5599d","name":"changes to the template","info":"changes seem to need an additional restart of node-red (i.e. message coming in at restart), can't be bothered to figure out why","x":660,"y":40,"wires":[]},{"id":"b1190d27.f7a18","type":"inject","z":"11371068.5599d","name":"refresh template html","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":"1","x":200,"y":240,"wires":[["16a60efe.21eba1"]]},{"id":"d1da4c39.cf015","type":"comment","z":"ccda7ca.4b72e8","name":"Version 2 functional description","info":"Spec so far\n\nGENERAL\n- Management of light \"fixtures\", \"zones\", and \"scenes\"\n- NR Dashboard user interface which auto-populates sliders, colour pickers, and scene selection buttons based on which fixtures are in the given zone we are controlling\n- Front-end management of the system (i.e. from NR Dashboard)\n- All config info stored into context (home.light.config)\n- Light circuits or fittings (or individual bulbs in the case of e.g. Philips Hue) are called Fixtures\n- Fixtures, zones, and mappings are 3 sections under the \"manage lighting\" tab\n- Scene management is done as part of this, but UI for scenes (add/remove scene, populate or set scene colours or light levels) will be under the tab where lighting controls for a given zone are. This enables e.g. family members to create / update / delete lighting scenes for that zone, on the fly. (Buttons are updated dynamically so user can test their new scene and tweak quickly)\n\nFIXTURES\n- Add fixture (user specifies ID, location, type, control type)\n- Includes form validation and checking for duplicate IDs with feedback\n- Show list of existing fixtures, with delete button to remove one\n- Delete fixture also removes associated fixture-to-zone mappings\n- Automatically update list when add/remove happens\n- Upon creation of fitting, current settings (i.e. light level or RGB) are generated with default vals according to fitting type (RGB / RGBW etc)\n\nZONES\n- Add zone (user specifies zone ID, name)\n- Form validation / check for duplicate IDs with feedback\n- 3D table of zones\n - each row is a zone. Delete button removes zone and any fixture-to-zone mappings\n - each row shows existing mappings, each having its own button to remove\n - this enables user to view and delete mappings from the zone view\n\nASSIGN FIXTURE TO ZONE\n- Select from list of fixtures, and list of zones, to assign a fixture to a zone\n- Form validation (in case of existing mapping) with feedback\n- List showing all mappings with delete button to \"unassign\" (although this can be done from the zone view)\n\nSCENE MANAGEMENT\n- This is done under the control template for each individual zone\n\nLIGHT CONTROL INTERFACE\n- To be displayed on e.g. a tablet mounted on the wall in a given zone. Or just on your mobile device. Or you can interface with any other controller you like. For example I'll be using my own homemade scene controller wall boxes with multiple scene buttons that will correspond to the first 5 scenes you create.\n- Easily remove the scene management section, if you prefer not to have this option in your zone controller\n","x":190,"y":120,"wires":[]},{"id":"a38b8274.34b47","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"ID","tooltip":"","group":"1a37e545.435d2b","order":1,"width":3,"height":1,"passthru":false,"mode":"text","delay":"350","topic":"","x":750,"y":160,"wires":[["abe867b3.c73988"]]},{"id":"abe867b3.c73988","type":"change","z":"ccda7ca.4b72e8","name":"","rules":[{"t":"set","p":"newfixture.ID","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1020,"y":160,"wires":[[]]},{"id":"6b4954c6.ea20dc","type":"ui_button","z":"ccda7ca.4b72e8","name":"","group":"1a37e545.435d2b","order":5,"width":1,"height":1,"passthru":false,"label":"Save","tooltip":"","color":"","bgcolor":"","icon":"","payload":"nothing","payloadType":"str","topic":"","x":290,"y":280,"wires":[["82c9f15b.0f115"]]},{"id":"157061c7.c9849e","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"Friendly location","tooltip":"","group":"1a37e545.435d2b","order":2,"width":3,"height":1,"passthru":true,"mode":"text","delay":"1000","topic":"","x":780,"y":180,"wires":[["3af16af6.0218a6"]]},{"id":"3af16af6.0218a6","type":"change","z":"ccda7ca.4b72e8","name":"","rules":[{"t":"set","p":"newfixture.friendly_location","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1060,"y":180,"wires":[[]]},{"id":"82c9f15b.0f115","type":"function","z":"ccda7ca.4b72e8","name":"New fixture","func":"// Save new fixture entered in Dashboard to global context\n// Includes form validation and duplicate check\n// and supports clearing the form when done correctly\n\n// check form was filled in properly\nif (typeof flow.get(\"newfixture\") == 'undefined') {\n    msg.payload = \"You didn't enter anything - fixture not saved\"\n    msg.error = true\n    return msg\n}\n\n// assume newfixture object exists (some part of form was filled)\nvar newfixture = flow.get(\"newfixture\")\n\n// if form not complete\nif (typeof newfixture.ID == 'undefined' ||\n           newfixture.ID === \"\" ||\n    typeof newfixture.friendly_location == 'undefined' ||\n           newfixture.friendly_location === \"\" ||\n    typeof newfixture.friendly_name == 'undefined' ||\n           newfixture.friendly_name === \"\" ||\n    typeof newfixture.type == 'undefined' ||\n           newfixture.type === \"\" ||\n    typeof newfixture.resolution == 'undefined' ||\n           newfixture.resolution === \"\") {\n    msg.payload = \"Missing info - fixture not saved\"\n    msg.error = true\n    return msg\n}\n\n// if we've got this far, we have a good new fixture to add\n// create global fixtures object if it's not there\nif (typeof global.get(\"home.light.config.fixtures\") == 'undefined') {\n    global.set(\"home.light.config.fixtures\", {})\n}\n\n// get light fixtures object\nvar fixtures = global.get(\"home.light.config.fixtures\")\n\n// does fixture ID exist?\n\nif (fixtures.hasOwnProperty(newfixture.ID)) {\n    msg.payload = \"oops, ID already exists\"\n    msg.error = true\n    return msg\n} else {\n    switch (newfixture.type) {\n        case \"1_non_dim\":\n        \tlightsetting = {\"state\":false}  // i.e. light defaults to off\n        \tbreak;\n        case \"2_single_colour\":\n        \tlightsetting = {\"brightness\":0} // single colour only has brightness setting\n        \tbreak;\n        case \"3_RGB\":\n        \tlightsetting = {\"brightness\":0, rgb: [255, 255, 255]}\n        \tbreak;\n        case \"4_RGBW\":\n        \tlightsetting = {\"brightness\":0, rgbw: [255, 255, 255, 255]}\n        \tbreak;\n        case \"5_RGBWW\":\n        \tlightsetting = {\"brightness\":0, rgbww: [255, 255, 255, 255, 255]}\n        \tbreak;\n        case \"6_individually_addressable\":\n        \tlightsetting = {\"brightness\":0} // god knows what else we will put here later...\n        \tbreak;\n    }\n    d = new Date().toLocaleDateString(); t = new Date().toLocaleTimeString();\n    fixtures[newfixture.ID] = {\n        \"current_setting\" : lightsetting,\n        \"friendly_location\": newfixture.friendly_location,\n        \"friendly_name\": newfixture.friendly_name,\n        \"type\": newfixture.type,\n        \"resolution\":newfixture.resolution,\n        \"created_date\": d,\n        \"created_time\": t\n    }\n    \n    global.set(\"home.light.config.fixtures\",fixtures)\n    msg.payload = \"Success - added fixture\"\n    msg.error = false\n    // now remove item from flow context, otherwise our\n    // validation tests above will always pass\n    flow.set(\"newfixture\", undefined);\n    \n    return msg\n}","outputs":1,"noerr":0,"x":450,"y":280,"wires":[["b3fa17e3.310bb8","e4c053c5.1ee5e"]]},{"id":"5e1a75cc.e74a3c","type":"ui_dropdown","z":"ccda7ca.4b72e8","name":"Type","label":"","tooltip":"","place":"Control Type","group":"1a37e545.435d2b","order":4,"width":3,"height":1,"passthru":true,"options":[{"label":"Non Dimmable (Switch)","value":"1_non_dim","type":"str"},{"label":"Dimmable Single Colour","value":"2_single_colour","type":"str"},{"label":"RGB","value":"3_RGB","type":"str"},{"label":"RGBW","value":"4_RGBW","type":"str"},{"label":"RGBWW","value":"5_RGBWW","type":"str"},{"label":"Individually Addressable","value":"6_individually_addressable","type":"str"}],"payload":"","topic":"","x":750,"y":240,"wires":[["1c92c181.65c40e"]]},{"id":"1c92c181.65c40e","type":"change","z":"ccda7ca.4b72e8","name":"","rules":[{"t":"set","p":"newfixture.type","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1030,"y":240,"wires":[[]]},{"id":"b3fa17e3.310bb8","type":"ui_template","z":"ccda7ca.4b72e8","group":"1a37e545.435d2b","name":"New fixture validation","order":6,"width":"8","height":1,"format":"{{msg.payload}}","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":980,"y":280,"wires":[[]]},{"id":"b5bb9435.f06ff8","type":"delay","z":"ccda7ca.4b72e8","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":800,"y":300,"wires":[["b3fa17e3.310bb8"]]},{"id":"e4c053c5.1ee5e","type":"function","z":"ccda7ca.4b72e8","name":"Success","func":"// Save new fixture: clear form & result if successful\n\nif (!msg.error) {\n    msg.payload = \"\"\n    return msg;\n}\n","outputs":1,"noerr":0,"x":620,"y":300,"wires":[["b5bb9435.f06ff8","a38b8274.34b47","157061c7.c9849e","5e1a75cc.e74a3c","dce03a16.8f99a8","cce713b5.db9a6","e67b2e5d.8da8c"]]},{"id":"33163ec5.a88d22","type":"change","z":"ccda7ca.4b72e8","name":"","rules":[{"t":"set","p":"newfixture.friendly_name","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1060,"y":200,"wires":[[]]},{"id":"dce03a16.8f99a8","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"Friendly Fitting Type","tooltip":"","group":"1a37e545.435d2b","order":3,"width":3,"height":1,"passthru":true,"mode":"text","delay":"1000","topic":"","x":800,"y":200,"wires":[["33163ec5.a88d22"]]},{"id":"b7655eb1.6ef5f","type":"change","z":"ccda7ca.4b72e8","name":"Get","rules":[{"t":"set","p":"fixtures","pt":"msg","to":"home.light.config.fixtures","tot":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":690,"y":380,"wires":[["8c01b9cf.7dcf48"]]},{"id":"8c01b9cf.7dcf48","type":"ui_template","z":"ccda7ca.4b72e8","group":"1a37e545.435d2b","name":"Fixtures List","order":7,"width":"12","height":"10","format":"<h3>Register of Light Fixtures</h3>\n\n<table>\n    <tr style=\"font-weight:800; background-color:rgba(20,20,20,.6);\">\n        <td>ID</td>\n        <td>Location</td>\n        <td>Name</td>\n        <td>Type</td>\n        <td>Resolution</td>\n        <td>Added</td>\n        <td>Delete*</td>\n    </tr>\n    <tr ng-repeat=\"(key, value) in msg.fixtures\">\n        <td>{{key}}</td>\n        <td>{{value.friendly_location}}</td>\n        <td>{{value.friendly_name}}</td>\n        <td>{{value.type}}</td>\n        <td>{{value.resolution}}</td>\n        <td style=\"color:#888;\">{{value.created_time}} {{value.created_date}}</td>\n        <td><md-button ng-click=\"send({action: 'delete', topic: key})\">Del</md-button></td>\n    </tr>\n</table>","storeOutMessages":false,"fwdInMessages":false,"templateScope":"local","x":830,"y":380,"wires":[["ae3e732b.06d51"]]},{"id":"ae3e732b.06d51","type":"function","z":"ccda7ca.4b72e8","name":"Set","func":"// get object from memory\n// NB we are using \"bracket notation\" just in case the ID\n// (i.e. the object name, represented here as msg.topic)\n// had a space\n\nif (msg.action == \"delete\") {\n    // delete the fixture\n    obj = global.get(\"home.light.config.fixtures\")\n    delete obj[msg.topic]\n    global.set(\"home.light.config.fixtures\", obj)\n\n    // delete any mappings this fixture had to a zone\n    objMappings = global.get(\"home.light.config.fixture_zone_mappings\");\n    Object.keys(objMappings).forEach(key => {\n        if (objMappings[key].fixtureID == msg.topic) {\n            delete objMappings[key]\n        }\n    })\n    \n}\n\nmsg.payload=\"\"\nreturn msg;\n","outputs":1,"noerr":0,"x":970,"y":380,"wires":[["b7655eb1.6ef5f","69ff0c06.2b52d4"]]},{"id":"62c7c082.8d6ee","type":"inject","z":"ccda7ca.4b72e8","name":"Update view","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":510,"y":380,"wires":[["b7655eb1.6ef5f"]]},{"id":"8a4b0c8d.db677","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"ID","tooltip":"","group":"1386e1df.83b3ae","order":1,"width":3,"height":1,"passthru":false,"mode":"text","delay":"350","topic":"","x":650,"y":540,"wires":[["163381fe.683f9e"]]},{"id":"163381fe.683f9e","type":"change","z":"ccda7ca.4b72e8","name":"","rules":[{"t":"set","p":"newzone.ID","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":920,"y":540,"wires":[[]]},{"id":"722b81dd.3459a","type":"ui_button","z":"ccda7ca.4b72e8","name":"","group":"1386e1df.83b3ae","order":3,"width":1,"height":1,"passthru":false,"label":"Save","tooltip":"","color":"","bgcolor":"","icon":"","payload":"nothing","payloadType":"str","topic":"","x":290,"y":600,"wires":[["c82cb558.a0e218"]]},{"id":"c82cb558.a0e218","type":"function","z":"ccda7ca.4b72e8","name":"New zone","func":"// Save new zone entered in Dashboard to global context\n// Includes form validation and duplicate check\n// and supports clearing the form when done correctly\n\n// check form was filled in properly\nif (typeof flow.get(\"newzone\") == 'undefined') {\n    msg.payload = \"You didn't enter anything - zone not saved\"\n    msg.error = true\n    return msg\n}\n\n// assume newzone object exists (some part of form was filled)\nvar newzone = flow.get(\"newzone\")\n\n// if form not complete\nif (typeof newzone.ID == 'undefined' ||\n           newzone.ID === \"\" ||\n    typeof newzone.friendly_name == 'undefined' ||\n           newzone.friendly_name === \"\") {\n    msg.payload = \"Missing info - zone not saved\"\n    msg.error = true\n    return msg\n}\n\n// if we've got this far, we have a good new zone to add\n// create global zones object if it's not there\nif (typeof global.get(\"home.light.config.zones\") == 'undefined') {\n    global.set(\"home.light.config.zones\", {})\n}\n\n// get light zones object\nvar zones = global.get(\"home.light.config.zones\")\n\n// does fixture ID exist?\n\nif (zones.hasOwnProperty(newzone.ID)) {\n    msg.payload = \"oops, ID already exists\"\n    msg.error = true\n    return msg\n} else {\n    d = new Date().toLocaleDateString(); t = new Date().toLocaleTimeString();\n    zones[newzone.ID] = {\n        \"friendly_name\": newzone.friendly_name,\n        \"created_date\": d,\n        \"created_time\": t\n    }\n    \n    global.set(\"home.light.config.zones\",zones)\n    msg.payload = \"Success - added zone\"\n    msg.error = false\n    // now remove item from flow context, otherwise our\n    // validation tests above will always pass\n    flow.set(\"newzone\", undefined);\n    \n    return msg\n}","outputs":1,"noerr":0,"x":420,"y":600,"wires":[["650f57be.ab6cb8","9136d0f1.dee9"]]},{"id":"650f57be.ab6cb8","type":"ui_template","z":"ccda7ca.4b72e8","group":"1386e1df.83b3ae","name":"New zone validation","order":4,"width":"8","height":1,"format":"{{msg.payload}}","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":960,"y":600,"wires":[[]]},{"id":"8c81fc43.b80e5","type":"delay","z":"ccda7ca.4b72e8","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":760,"y":620,"wires":[["650f57be.ab6cb8"]]},{"id":"9136d0f1.dee9","type":"function","z":"ccda7ca.4b72e8","name":"Success","func":"// Save new zone: clear form & result if successful\n\nif (!msg.error) {\n    msg.payload = \"\"\n    return msg;\n}\n","outputs":1,"noerr":0,"x":580,"y":620,"wires":[["8c81fc43.b80e5","8a4b0c8d.db677","40796360.d8e44c","8565246a.e7f2d8","9a29b343.663b7"]]},{"id":"6bb02cec.a26d14","type":"ui_template","z":"ccda7ca.4b72e8","group":"1386e1df.83b3ae","name":"Zones List","order":5,"width":"12","height":"10","format":"<style>\n    table {border: none;}\n    .nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n    margin-top: 0px;\n    }\n    .nr-dashboard-theme .nr-dashboard-template .md-button {\n    margin-right: 0 10px 0 0;\n    min-height: 0;\n    min-width: unset;\n    line-height: unset;\n    height: 21px;\n    }\n    .tags {\n    font-size: 11px;\n    color: #ddd;\n    border: 1px solid #555;\n    background-color: rgba(9, 116, 121, 0.31);\n    padding: 2px;\n    margin: 0 0px 0 5px;\n    }\n    .datarow td {\n    padding: 5px 0 0px 0px;\n    background-color: #404040;\n    }\n    .tagcol td {\n    padding: 0 0 10px 0;\n    background: #404040;\n    border-bottom: 10px solid #333;   \n    }\n    .tagcol {\n\n    }\n</style>\n\n<h3>Register of Light Zones</h3>\n\n<table cellspacing=\"0\" cellpadding=\"0\">\n    <tr style=\"font-weight:800; background-color:rgba(20,20,20,.6);\">\n        <td>ID</td>\n        <td>Name</td>\n        <td>Added</td>\n        <td>Delete*</td>\n    </tr>\n    <tr class=\"datarow\" ng-repeat-start=\"(key, value) in msg.zones\">\n        <td>{{key}}</td>\n        <td>{{value.friendly_name}}</td>\n        <td style=\"color:#888;\">{{value.created_time}} {{value.created_date}}</td>\n        <td><md-button ng-click=\"send({action: 'delete', topic: key})\">Del</md-button></td>\n    </tr>\n    <tr class=\"tagcol\" ng-repeat-end>\n        <td colspan=\"5\">\n            <span class=\"tags\" ng-repeat-start=\"val1 in value.fixtures\">{{val1}}</span>\n            <md-button class=\"minibutton\" ng-repeat-end ng-click=\"send({action: 'deletefixturemapping', topic: [key,val1]})\">x</md-button>\n        </td>\n    </tr>\n</table>\n","storeOutMessages":false,"fwdInMessages":false,"templateScope":"local","x":830,"y":680,"wires":[["a8bcd4a4.cbeee8"]]},{"id":"a8bcd4a4.cbeee8","type":"function","z":"ccda7ca.4b72e8","name":"Set","func":"// get object from memory\n// NB we are using \"bracket notation\" just in case the ID\n// (i.e. the object name, represented here as msg.topic)\n// had a space\n\n\nif (msg.action == \"delete\") {\n    // delete zone (provided in msg.topic)\n    zones = global.get(\"home.light.config.zones\");\n    delete zones[msg.topic];\n    global.set(\"home.light.config.zones\", zones);\n    \n    // loop through all mappings and delete any for the given zone\n    objMappings = global.get(\"home.light.config.fixture_zone_mappings\");\n    Object.keys(objMappings).forEach(key => {\n        if (objMappings[key].zoneID == msg.topic) {\n            delete objMappings[key]\n        }\n    })\n}\n\nif (msg.action == \"deletefixturemapping\") {\n    obj = global.get(\"home.light.config.fixture_zone_mappings\")\n    delete obj[msg.topic[0] + \"_\" + msg.topic[1]]\n    global.set(\"home.light.config.fixture_zone_mappings\", obj)\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"x":970,"y":680,"wires":[["8565246a.e7f2d8","9a29b343.663b7"]]},{"id":"58c96138.33284","type":"inject","z":"ccda7ca.4b72e8","name":"Update view","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":510,"y":680,"wires":[["8565246a.e7f2d8"]]},{"id":"40796360.d8e44c","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"Friendly Name","tooltip":"","group":"1386e1df.83b3ae","order":2,"width":3,"height":1,"passthru":true,"mode":"text","delay":"1000","topic":"","x":680,"y":560,"wires":[["d65b339e.001fd"]]},{"id":"d65b339e.001fd","type":"change","z":"ccda7ca.4b72e8","name":"","rules":[{"t":"set","p":"newzone.friendly_name","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":950,"y":560,"wires":[[]]},{"id":"c76218a2.b8a4d8","type":"change","z":"ccda7ca.4b72e8","name":"","rules":[{"t":"set","p":"new_fixture_zone_mapping.fixtureID","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":970,"y":840,"wires":[[]]},{"id":"6d3c3af8.9cf694","type":"ui_button","z":"ccda7ca.4b72e8","name":"","group":"1598a8ff.884b77","order":3,"width":1,"height":1,"passthru":false,"label":"Assign","tooltip":"","color":"","bgcolor":"","icon":"","payload":"nothing","payloadType":"str","topic":"","x":190,"y":920,"wires":[["6590b1a0.37fd3"]]},{"id":"6590b1a0.37fd3","type":"function","z":"ccda7ca.4b72e8","name":"New fixture_zone_mapping","func":"// NEEDS RE-WRITING FOR FIXTURE TO ZONE ASSIGNMENT\n// ID will be automatically generated as per:\n// zoneID_fixtureID\n// if such an ID exists, then message: already exists in zone\n// Don't forget to update code for deleting a zone and\n// a fixture. Each should check for corresponding entries\n// in the mappings object and remove these entries\n\n\n// Save new zone entered in Dashboard to global context\n// Includes form validation and duplicate check\n// and supports clearing the form when done correctly\n\n// check form was filled in properly\nif (typeof flow.get(\"new_fixture_zone_mapping\") == 'undefined') {\n    msg.payload = \"You didn't enter anything - fixture not assigned\"\n    msg.error = true\n    return msg\n}\n\n// assume newzone object exists (some part of form was filled)\nvar new_fixture_zone_mapping = flow.get(\"new_fixture_zone_mapping\")\n\n// if form not complete\nif (typeof new_fixture_zone_mapping.fixtureID == 'undefined' ||\n           new_fixture_zone_mapping.fixtureID === \"\" ||\n    typeof new_fixture_zone_mapping.zoneID == 'undefined' ||\n           new_fixture_zone_mapping.zoneID === \"\") {\n    msg.payload = \"Missing info - fixture not assigned\"\n    msg.error = true\n    return msg\n}\n\n// if we've got this far, we have a good assignment to create\n// create global assignment object if it's not there\nif (typeof global.get(\"home.light.config.fixture_zone_mappings\") == 'undefined') {\n    global.set(\"home.light.config.fixture_zone_mappings\", {})\n}\n\n// get light fixture zone mappings object\nvar fixture_zone_mappings = global.get(\"home.light.config.fixture_zone_mappings\")\n\n// does mapping ID exist? (it will look like this: zoneID_fixtureID)\nvar newID = new_fixture_zone_mapping.zoneID + \"_\" + new_fixture_zone_mapping.fixtureID\n\nif (fixture_zone_mappings.hasOwnProperty(newID)) {\n    msg.payload = \"oops, fixture already added to zone\"\n    msg.error = true\n    return msg\n} else {\n    d = new Date().toLocaleDateString(); t = new Date().toLocaleTimeString();\n    fixture_zone_mappings[newID] = {\n        \"zoneID\": new_fixture_zone_mapping.zoneID,        // technically not necessary\n        \"fixtureID\": new_fixture_zone_mapping.fixtureID,  // technically not necessary\n        \"created_date\": d,\n        \"created_time\": t\n    }\n    \n    global.set(\"home.light.config.fixture_zone_mappings\",fixture_zone_mappings)\n    msg.payload = \"Success - assigned fixture to zone\"\n    msg.error = false\n    // now remove item from flow context, otherwise our\n    // validation tests above will always pass\n    flow.set(\"new_fixture_zone_mapping\", undefined);\n    \n    return msg\n}","outputs":1,"noerr":0,"x":380,"y":920,"wires":[["5e348cad.d1d274","b21bbc75.a1df1"]]},{"id":"5e348cad.d1d274","type":"ui_template","z":"ccda7ca.4b72e8","group":"1598a8ff.884b77","name":"New fixture-zone validation","order":4,"width":"8","height":1,"format":"{{msg.payload}}","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":1020,"y":920,"wires":[[]]},{"id":"d68689da.6ecbc8","type":"delay","z":"ccda7ca.4b72e8","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":820,"y":940,"wires":[["5e348cad.d1d274"]]},{"id":"b21bbc75.a1df1","type":"function","z":"ccda7ca.4b72e8","name":"Success","func":"// Save new zone: clear form & result if successful\n\nif (!msg.error) {\n    msg.payload = \"\"\n    return msg;\n}\n\n","outputs":1,"noerr":0,"x":620,"y":940,"wires":[["d68689da.6ecbc8","c6dcd744.bcc438","8bcb0afe.baab38","bcbb55c0.a26bf8","aa3fb37d.ef248"]]},{"id":"c6dcd744.bcc438","type":"change","z":"ccda7ca.4b72e8","name":"Get","rules":[{"t":"set","p":"fixture_zone_mappings","pt":"msg","to":"home.light.config.fixture_zone_mappings","tot":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":690,"y":1020,"wires":[["3b08bea0.64d732"]]},{"id":"3b08bea0.64d732","type":"ui_template","z":"ccda7ca.4b72e8","group":"1598a8ff.884b77","name":"Fixture to Zone Mappings List","order":5,"width":"12","height":"12","format":"<h3>Register of Fixture to Zone Mappings</h3>\n\n<table>\n    <tr style=\"font-weight:800; background-color:rgba(20,20,20,.6);\">\n        <td>ID</td>\n        <td>Zone</td>\n        <td>Fixture</td>\n        <td>Added</td>\n        <td>Delete*</td>\n    </tr>\n    <tr ng-repeat=\"(key, value) in msg.fixture_zone_mappings\">\n        <td>{{key}}</td>\n        <td>{{value.zoneID}}</td>\n        <td>{{value.fixtureID}}</td>\n        <td style=\"color:#888;\">{{value.created_time}} {{value.created_date}}</td>\n        <td><md-button ng-click=\"send({action: 'delete', topic: key})\">Del</md-button></td>\n    </tr>\n</table>","storeOutMessages":false,"fwdInMessages":false,"templateScope":"local","x":890,"y":1020,"wires":[["cb9ef06c.ca2fb"]]},{"id":"cb9ef06c.ca2fb","type":"function","z":"ccda7ca.4b72e8","name":"Set","func":"// get object from memory\n// NB we are using \"bracket notation\" just in case the ID\n// (i.e. the object name, represented here as msg.topic)\n// had a space\n\nif (msg.action == \"delete\") {\n    obj = global.get(\"home.light.config.fixture_zone_mappings\")\n    delete obj[msg.topic]\n    global.set(\"home.light.config.fixture_zone_mappings\", obj)\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"x":1090,"y":1020,"wires":[["aa3fb37d.ef248"]]},{"id":"ba710296.13f73","type":"inject","z":"ccda7ca.4b72e8","name":"Update view","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":510,"y":1020,"wires":[["c6dcd744.bcc438"]]},{"id":"eac0f136.73b53","type":"change","z":"ccda7ca.4b72e8","name":"","rules":[{"t":"set","p":"new_fixture_zone_mapping.zoneID","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":970,"y":860,"wires":[[]]},{"id":"1e28ba9e.1499f5","type":"ui_dropdown","z":"ccda7ca.4b72e8","name":"Fixture Select","label":"","tooltip":"","place":"Select Fixture","group":"1598a8ff.884b77","order":1,"width":"3","height":"1","passthru":true,"options":[],"payload":"","topic":"","x":700,"y":840,"wires":[["c76218a2.b8a4d8"]]},{"id":"8bcb0afe.baab38","type":"function","z":"ccda7ca.4b72e8","name":"","func":"msg.options = Object.keys((global.get(\"home.light.config.fixtures\")))\nreturn msg;","outputs":1,"noerr":0,"x":530,"y":840,"wires":[["1e28ba9e.1499f5"]]},{"id":"ce885af.b2359a8","type":"ui_dropdown","z":"ccda7ca.4b72e8","name":"Zone Select","label":"","tooltip":"","place":"Select Zone","group":"1598a8ff.884b77","order":2,"width":"3","height":"1","passthru":true,"options":[],"payload":"","topic":"","x":690,"y":860,"wires":[["eac0f136.73b53"]]},{"id":"bcbb55c0.a26bf8","type":"function","z":"ccda7ca.4b72e8","name":"","func":"msg.options = Object.keys((global.get(\"home.light.config.zones\")))\nreturn msg;","outputs":1,"noerr":0,"x":530,"y":860,"wires":[["ce885af.b2359a8"]]},{"id":"8565246a.e7f2d8","type":"function","z":"ccda7ca.4b72e8","name":"Get","func":"// list out the zones\n// also show light fixtures assigned to each zone\n// as zones and assignments are two separate objects,\n// we shall insert the mappings for a given zone as an array into the\n// zone object returned\nmsg.zones = {}\nzones = global.get(\"home.light.config.zones\")\n\n// copy our zones into the msg to send out, also set up fixtures array\n// so we can populate this for the list view\nObject.keys(zones).forEach(key => {\n    msg.zones[key] = {\n        \"friendly_name\": zones[key].friendly_name,\n        \"created_date\": zones[key].created_date,\n        \"created_time\": zones[key].created_time,\n        \"fixtures\": []\n    }\n})\n\n\n// now populate fixtures arrays in each zone\n// loop through every mapping, get the zoneID, then insert the fixtureID\n// into the corresponding zone now in msg.zones\n\nfixture_zone_mappings = global.get(\"home.light.config.fixture_zone_mappings\")\n\nObject.keys(fixture_zone_mappings).forEach(key => {\n    // (the IF ensures we don't insert fixture into zone that\n    // does not exist). It will just fail silently.\n    if (typeof msg.zones[fixture_zone_mappings[key].zoneID] !== 'undefined') {\n        msg.zones[fixture_zone_mappings[key].zoneID].fixtures.push(fixture_zone_mappings[key].fixtureID)\n    }\n\n//   console.log(key);        // the name of the current key.\n//   console.log(myObj[key]); // the value of the current key.\n});\n\nreturn msg","outputs":1,"noerr":0,"x":690,"y":680,"wires":[["6bb02cec.a26d14"]]},{"id":"91962f50.feee3","type":"link in","z":"ccda7ca.4b72e8","name":"To zone list","links":["1f8e94b.04cd86b","69ff0c06.2b52d4","aa3fb37d.ef248"],"x":555,"y":720,"wires":[["8565246a.e7f2d8"]]},{"id":"aa3fb37d.ef248","type":"link out","z":"ccda7ca.4b72e8","name":"From fixture_zone_mapping","links":["91962f50.feee3","ece7a8d6.395488","3f177b4a.22a414","f74fd150.29d7f","7fe576ed.d2ec88","2b26aa37.363d96","d6b0de0.f068f2","2b69fcd3.5b69f4","364c841c.bc8ecc","75987b30.116d54","a854f145.64a4b","f6f27716.55f7b8","4d57de4c.013d3","767ff68c.c416d8","f3978fd.fdfe17","261562b1.09abbe","d9df52ec.4ed04","ffa987ec.b665f8"],"x":655,"y":1080,"wires":[]},{"id":"9a29b343.663b7","type":"link out","z":"ccda7ca.4b72e8","name":"From zone","links":["2b26aa37.363d96","3f177b4a.22a414","ece7a8d6.395488","f74fd150.29d7f","7fe576ed.d2ec88","d6b0de0.f068f2","2b69fcd3.5b69f4","364c841c.bc8ecc","75987b30.116d54","a854f145.64a4b","f6f27716.55f7b8","4d57de4c.013d3","767ff68c.c416d8","f3978fd.fdfe17","261562b1.09abbe","d9df52ec.4ed04","ffa987ec.b665f8"],"x":1075,"y":660,"wires":[]},{"id":"2b26aa37.363d96","type":"link in","z":"ccda7ca.4b72e8","name":"To fixture_zone_mapping","links":["1f8e94b.04cd86b","69ff0c06.2b52d4","9a29b343.663b7","aa3fb37d.ef248","e67b2e5d.8da8c"],"x":375,"y":980,"wires":[["c6dcd744.bcc438","8bcb0afe.baab38","bcbb55c0.a26bf8"]]},{"id":"b5fbea0a.335bf8","type":"comment","z":"ccda7ca.4b72e8","name":"Add / remove fixture","info":"","x":250,"y":240,"wires":[]},{"id":"e41a74f5.aadc98","type":"comment","z":"ccda7ca.4b72e8","name":"Add / remove zone, list zones, remove assignment","info":"","x":270,"y":560,"wires":[]},{"id":"8f2fe5be.0d7728","type":"comment","z":"ccda7ca.4b72e8","name":"Assign fixture to zone","info":"","x":260,"y":800,"wires":[]},{"id":"69ff0c06.2b52d4","type":"link out","z":"ccda7ca.4b72e8","name":"From delete fixture","links":["2b26aa37.363d96","3f177b4a.22a414","7fe576ed.d2ec88","91962f50.feee3","ece7a8d6.395488","f74fd150.29d7f","d6b0de0.f068f2","2b69fcd3.5b69f4","364c841c.bc8ecc","75987b30.116d54","a854f145.64a4b","f6f27716.55f7b8","4d57de4c.013d3","767ff68c.c416d8","f3978fd.fdfe17","261562b1.09abbe","d9df52ec.4ed04","ffa987ec.b665f8"],"x":1035,"y":435,"wires":[]},{"id":"cce713b5.db9a6","type":"ui_dropdown","z":"ccda7ca.4b72e8","name":"Resolution","label":"","tooltip":"","place":"Resolution","group":"1a37e545.435d2b","order":4,"width":3,"height":1,"passthru":true,"options":[{"label":"Very Fine (1/100)","value":1,"type":"num"},{"label":"Fine (2/100)","value":2,"type":"num"},{"label":"Medium Fine (4/100)","value":4,"type":"num"},{"label":"Medium Fine (5/100)","value":5,"type":"num"},{"label":"Medium (10/100)","value":10,"type":"num"},{"label":"Medium Low (20/100)","value":20,"type":"num"},{"label":"Low (25/100)","value":25,"type":"num"},{"label":"Very Low (50/100)","value":50,"type":"num"}],"payload":"","topic":"","x":770,"y":220,"wires":[["a02d1fa3.a8071"]]},{"id":"a02d1fa3.a8071","type":"change","z":"ccda7ca.4b72e8","name":"","rules":[{"t":"set","p":"newfixture.resolution","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1040,"y":220,"wires":[[]]},{"id":"7dc6a4d.74efc5c","type":"inject","z":"ccda7ca.4b72e8","name":"Node-RED restart","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":"5","x":130,"y":1160,"wires":[["1f8e94b.04cd86b"]]},{"id":"9ba838e3.39eb28","type":"comment","z":"ccda7ca.4b72e8","name":"TO DO","info":"# Snagging\n\n\n- show that no scenes have been defined\n\n\n- Make UI look nice\n - General spacing, alignment, and element styling\n - How to specify number of elements in a row (scene buttons)\n - Light up the scene buttons when pressed\n- Update Scene\n- Refresh sliders when fixture assigned to zone (or removed)\n- ","x":130,"y":160,"wires":[]},{"id":"1f8e94b.04cd86b","type":"link out","z":"ccda7ca.4b72e8","name":"From Node-RED Restart","links":["a1fd81a0.b58a3","91962f50.feee3","ecc09278.86274","2b26aa37.363d96","ece7a8d6.395488","3f177b4a.22a414","f74fd150.29d7f","7fe576ed.d2ec88","d6b0de0.f068f2","2b69fcd3.5b69f4","364c841c.bc8ecc","75987b30.116d54","a854f145.64a4b","f6f27716.55f7b8","4d57de4c.013d3","767ff68c.c416d8","f3978fd.fdfe17","261562b1.09abbe","d9df52ec.4ed04","ffa987ec.b665f8"],"x":275,"y":1160,"wires":[]},{"id":"a1fd81a0.b58a3","type":"link in","z":"ccda7ca.4b72e8","name":"To Fixtures List","links":["1f8e94b.04cd86b","e67b2e5d.8da8c"],"x":495,"y":440,"wires":[["b7655eb1.6ef5f"]]},{"id":"e67b2e5d.8da8c","type":"link out","z":"ccda7ca.4b72e8","name":"From New Fixture Creation","links":["2b26aa37.363d96","a1fd81a0.b58a3"],"x":615,"y":340,"wires":[]},{"id":"9896b48b.811cc8","type":"ui_template","z":"ccda7ca.4b72e8","group":"45acc00f.53f8a","name":"Zone Control","order":1,"width":"6","height":"14","format":"","storeOutMessages":false,"fwdInMessages":false,"templateScope":"local","x":610,"y":1280,"wires":[["a95b79f1.42ede8"]]},{"id":"a95b79f1.42ede8","type":"function","z":"ccda7ca.4b72e8","name":"Actuate","func":"// msg.action = bri / col / state\n// msg.topic = the light fixture\n// msg.payload = the value\n\nfunction hexToRgb(hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function(m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n\nif (msg.action == \"bri\") {\n\n    global.set(\"home.light.config.fixtures.\" + msg.topic + \".current_setting.brightness\", msg.brightness)\n    // MQTT\n    msg.topic = \"home/light/\" + msg.topic + \"/cmd/bri\"\n    msg.payload = msg.brightness\n}\n\nif (msg.action == \"col\") {\n    // MQTT\n    r = hexToRgb(msg.colour).r\n    g = hexToRgb(msg.colour).g\n    b = hexToRgb(msg.colour).b\n\n\n    // store colour to memory\n    var rgbsettings = [r,g,b]\n    global.set(\"home.light.config.fixtures.\" + msg.topic + \".current_setting.rgb\", rgbsettings)\n\n    // change topic and payload ready to pass it over to mqtt\n    msg.topic = \"home/light/\" + msg.topic + \"/cmd/col\"\n    msg.payload = {rgb: [r,g,b]}\n\n}\n\nif (msg.action == \"triggerscene\") {\n    // msg.topic is the name of the scene\n    // msg.zone is the id of the zone that the scene applies to\n    // i.e. light.config.zones.[msg.zone].scenes.[msg.topic]\n    // get the scene settings\n    var fixturesettings = global.get(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + msg.topic + \".settings\");\n\n    Object.keys(fixturesettings).forEach(key => {\n        // actuate the fixture AND store its new setting to memory\n        // start with brightness\n\n        global.set(\"home.light.config.fixtures.\" + key + \".current_setting.brightness\",fixturesettings[key].brightness)\n        // MQTT\n        msg.topic = \"home/light/\" + key + \"/cmd/bri\"\n        msg.payload = fixturesettings[key].brightness\n        node.send(msg)\n        \n        \n        if (fixturesettings[key].rgb !== undefined) {\n            // MQTT\n            r = fixturesettings[key].rgb[0]\n            g = fixturesettings[key].rgb[1]\n            b = fixturesettings[key].rgb[2]\n        \n            // store colour to memory\n            global.set(\"home.light.config.fixtures.\" + key + \".current_setting.rgb[0]\", r)\n            global.set(\"home.light.config.fixtures.\" + key + \".current_setting.rgb[1]\", g)\n            global.set(\"home.light.config.fixtures.\" + key + \".current_setting.rgb[2]\", b)\n        \n            // change topic and payload ready to pass it over to mqtt\n            msg.topic = \"home/light/\" + key + \"/cmd/col\"\n            msg.payload = {rgb: [r,g,b]}\n            node.send(msg)\n        }\n\n\n\n    })\n\n\n    // store the current scenename to memory, i.e. to show we are currently on that scene\n    // do it here...\n    \n    // finally tell Node-RED we are done\n    node.done();\n    return;\n}\n\n\nreturn msg;\n","outputs":1,"noerr":0,"x":780,"y":1280,"wires":[["c6aebfe7.5c361","24bb5b99.09fda4"]]},{"id":"268fea2f.5def46","type":"ui_template","z":"ccda7ca.4b72e8","group":"45acc00f.53f8a","name":"Scene Manage","order":2,"width":"6","height":"4","format":"","storeOutMessages":false,"fwdInMessages":false,"templateScope":"local","x":620,"y":1360,"wires":[["13b03d39.b621c3"]]},{"id":"13b03d39.b621c3","type":"function","z":"ccda7ca.4b72e8","name":"Scene Manage","func":"// 2 outputs feed back into the form.\n// The second output is the same msg, but with some reset, and a 5 second delay\n\nvar msg2 = {};\nfunction reset_form() {\n    // A function that resets the form\n    msg2.notify = false;\n    flow.set(\"scenetodelete\",undefined)\n    flow.set(\"newscene\",undefined)\n    // reset the input boxes\n    msg2.someModel = \"\"\n    msg2.sceneid = \"\"\n    msg2.scenefriendly = \"\"\n}\n\n// ** Get inputs **\n// ****************\n// for each keypress, update the temporary variable, ready to store in global once button is pressed\nif (msg.action == \"update_sceneid\") flow.set(\"newscene.ID\", msg.sceneid);\nif (msg.action == \"update_scenefriendly\") flow.set(\"newscene.friendly_name\", msg.scenefriendly);\nif (msg.action == \"select_to_delete\") flow.set(\"scenetodelete\", msg.name);\n\n\n\n// ** Create New Scene **\n// **********************\nif (msg.action == \"new_scene\") {\n\n    // check form was filled in properly\n    if (typeof flow.get(\"newscene\") == 'undefined') {\n        msg.notification = \"You didn't enter anything - scene not saved\"\n\t    msg.notify = true\n        reset_form();\n    \treturn [msg, msg2]\n    }\n    \n    // assume newscene object exists (some part of form was filled)\n    var newscene = flow.get(\"newscene\")\n    \n    // if form not complete\n    if (typeof newscene.ID == 'undefined' ||\n               newscene.ID === \"\" ||\n        typeof newscene.friendly_name == 'undefined' ||\n               newscene.friendly_name === \"\") {\n        msg.notification = \"Missing info - scene not saved\"\n        msg.notify = true\n        reset_form();\n    \treturn [msg, msg2]\n    }\n    \n    // if we've got this far, we have a good new zone to add\n    // create global zones object if it's not there\n    if (typeof global.get(\"home.light.config.zones.\" + msg.zone + \".scenes\") == 'undefined') {\n        global.set(\"home.light.config.zones.\" + msg.zone + \".scenes\", {})\n    }\n    \n    // get scenes object\n    var scenes = global.get(\"home.light.config.zones.\" + msg.zone + \".scenes\")\n\n    // does scene ID exist?\n    if (scenes.hasOwnProperty(newscene.ID)) {\n        msg.notification = \"oops, ID already exists\"\n        msg.notify = true\n        reset_form();\n    \treturn [msg, msg2]\n    } else {\n        d = new Date().toLocaleDateString(); t = new Date().toLocaleTimeString();\n        \n        // for each fixture in the zone, COPY (don't reference) the whole fixture object into the above\n        var scenesettings = {}\n        var mappings = global.get(\"home.light.config.fixture_zone_mappings\")\n        var fixtures = global.get(\"home.light.config.fixtures\")\n        Object.keys(mappings).forEach(key => {\n            if (mappings[key].zoneID == msg.zone) { // mapping for this zone\n                // using the fixtureID (mappings[key].fixtureID), copy some\n                // contents:\n                // fixtures[mappings[key].fixtureID].type and\n                // fixtures[mappings[key].fixtureID].current_setting\n                // to a new object\n                // then push that new object into the scenes one above\n                scenesettings[mappings[key].fixtureID] = JSON.parse(JSON.stringify(fixtures[mappings[key].fixtureID].current_setting))\n            }\n        })\n\n        scenes[newscene.ID] = {\n            \"friendly_name\": newscene.friendly_name,\n            \"created_date\": d,\n            \"created_time\": t,\n            \"settings\": scenesettings\n        }\n\n        global.set(\"home.light.config.zones.\" + msg.zone + \".scenes\", scenes)\n        msg.notification = \"Success - added scene\"\n        msg.notify = true\n        // now remove item from flow context, otherwise our\n        // validation tests above will always pass\n        flow.set(\"newscene\", undefined);\n        reset_form();\n    \treturn [msg, msg2]\n    }        \n}\n\n// ** Delete Scene **\n// ******************\nif (msg.action == \"deletescene\") {\n    var scenetodelete = flow.get(\"scenetodelete\")\n    global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + scenetodelete, undefined)\n    reset_form();\n\treturn [msg, msg2]\n}\n\n\n\n// ** Update Scene **\n// ******************\nif (msg.action == \"updatescene\") {\n    var sceneidtoupdate = flow.get(\"scenetodelete\")\n\n    // get scenes object\n    var scenetoupdate = global.get(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate)\n    // for each fixture in the zone, COPY (don't reference) the whole fixture object into the above\n    var updatedscenesettings = {}\n    var updatedmappings = global.get(\"home.light.config.fixture_zone_mappings\")\n    var updatedfixtures = global.get(\"home.light.config.fixtures\")\n    Object.keys(updatedmappings).forEach(key => {\n        if (updatedmappings[key].zoneID == msg.zone) { // mapping for this zone\n            updatedscenesettings[updatedmappings[key].fixtureID] = JSON.parse(JSON.stringify(updatedfixtures[updatedmappings[key].fixtureID].current_setting))\n        }\n    })\n\n    scenetoupdate.settings = updatedscenesettings;\n    global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate, scenetoupdate)\n\n    if (flow.get(\"newscene.friendly_name\") !== undefined && flow.get(\"newscene.friendly_name\") !== \"\") {\n        var scene1 = global.get(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate)\n        var newname = flow.get(\"newscene.friendly_name\")\n        scene1.friendly_name = newname\n        global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate,scene1)\n    }\n    \n    if (flow.get(\"newscene.ID\") !== undefined && flow.get(\"newscene.ID\") !== \"\") {\n        var scene2 = JSON.parse(JSON.stringify(global.get(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate)));\n        var newid = flow.get(\"newscene.ID\")\n        global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate,undefined)\n        global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + newid,scene2)\n    }\n\n    msg.notification = \"Success - updated scene\"\n    msg.notify = true\n    reset_form();\n\treturn [msg, msg2]\n\n}\n\n\n\n\n    // if (flow.get(\"newscene.ID\") !== undefined || flow.get(\"newscene.ID\") !== \"\") {\n    //     didweupdatetheid = true\n    //     newsceneid = flow.get(\"newscene.ID\")\n    // }\n\n    // // right now, updating with a new ID will create a new one\n    // if (didweupdatetheid === true) {\n    //     // clear the old object and create a new one\n    //     global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + newsceneid, scenetoupdate)\n    //     global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate, undefined)\n    // } else {\n    //     global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate, scenetoupdate)\n    // }\n","outputs":2,"noerr":0,"x":800,"y":1360,"wires":[["24bb5b99.09fda4"],["8ae57cc0.6c443"]]},{"id":"c6aebfe7.5c361","type":"mqtt out","z":"ccda7ca.4b72e8","name":"","topic":"","qos":"","retain":"","broker":"b144405e.a9f63","x":970,"y":1280,"wires":[]},{"id":"8ae57cc0.6c443","type":"delay","z":"ccda7ca.4b72e8","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1000,"y":1340,"wires":[["24bb5b99.09fda4"]]},{"id":"81ef3b9b.c7ce48","type":"mqtt in","z":"ccda7ca.4b72e8","name":"","topic":"home/light/3f_bedroom/scene","qos":"2","datatype":"auto","broker":"b144405e.a9f63","x":400,"y":1220,"wires":[["c3c58f91.dbd49"]]},{"id":"c3c58f91.dbd49","type":"function","z":"ccda7ca.4b72e8","name":"trigger scene","func":"// determine zone based on incoming MQTT path\n// this relies on matching up the MQTT path with the \"set msg.zoneid\"\n\nvar topic = msg.topic.split(\"/\")\nif (topic[0] === \"home\" && topic[1] === \"light\" && topic[3] == \"scene\") {\n    msg.zone = topic[2]\n    msg.topic = msg.payload\n    msg.action = \"triggerscene\"\n    return msg;\n}","outputs":1,"noerr":0,"x":630,"y":1220,"wires":[["a95b79f1.42ede8"]]},{"id":"2b69fcd3.5b69f4","type":"link in","z":"ccda7ca.4b72e8","name":"To Zone Fixture Controls","links":["1f8e94b.04cd86b","69ff0c06.2b52d4","9a29b343.663b7","aa3fb37d.ef248"],"x":255,"y":1320,"wires":[["24bb5b99.09fda4"]]},{"id":"24bb5b99.09fda4","type":"subflow:11371068.5599d","z":"ccda7ca.4b72e8","name":"","env":[{"name":"zonename","value":"3f_bedroom","type":"str"},{"name":"zone name","value":"3f_bedroom","type":"str"}],"x":420,"y":1320,"wires":[["9896b48b.811cc8"],["268fea2f.5def46"]]},{"id":"1a37e545.435d2b","type":"ui_group","z":"","name":"New Fixture","tab":"869c06ba.dfea88","order":2,"disp":true,"width":"12","collapse":false},{"id":"1386e1df.83b3ae","type":"ui_group","z":"","name":"New Zone","tab":"869c06ba.dfea88","order":3,"disp":true,"width":"12","collapse":false},{"id":"1598a8ff.884b77","type":"ui_group","z":"","name":"Fixture to Zone Assignment","tab":"869c06ba.dfea88","order":4,"disp":true,"width":"12","collapse":false},{"id":"45acc00f.53f8a","type":"ui_group","z":"","name":"Light","tab":"79f7425a.a73e1c","order":1,"disp":true,"width":"6","collapse":false},{"id":"b144405e.a9f63","type":"mqtt-broker","z":"","name":"Mayfield MQTT","broker":"192.168.0.10","port":"1883","clientid":"nodered","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"869c06ba.dfea88","type":"ui_tab","z":"","name":"Manage Lighting","icon":"dashboard","order":8,"disabled":false,"hidden":false},{"id":"79f7425a.a73e1c","type":"ui_tab","z":"","name":"Bedroom","icon":"dashboard","order":2}]